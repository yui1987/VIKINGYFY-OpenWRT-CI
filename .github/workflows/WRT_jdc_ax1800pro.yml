#云编译公用核心
name: WRT_jdc_ax1800pro

on:
  workflow_call:
    inputs:
      WRT_TARGET:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_WIFI:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: false
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_WIFI: ${{inputs.WRT_WIFI}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  wrt_core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Free Disk Space（清理磁盘空间）
        uses: endersonmenezes/free-disk-space@main
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* \
            microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
          remove_packages_one_command: true
          remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
            /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* \
            /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* \
            /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* \
            /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
            /var/lib/mysql* /var/log/azure*"
          testing: false

      - name: Initialization Environment（初始化环境）
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values（初始化值）
        run: |
          export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export WRT_CI=$(basename $GITHUB_WORKSPACE)
          export WRT_VER=$(echo $WRT_REPO | cut -d '/' -f 5-)-$WRT_BRANCH
          export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/$WRT_TARGET.txt)

          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_CI=$WRT_CI" >> $GITHUB_ENV
          echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
          echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

      - name: Clone Code（克隆代码）
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

      - name: Check Scripts（检查脚本）
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Patches（检查修补程序）
        run: |
          if [ -f "$GITHUB_WORKSPACE/Patches/Patches.sh" ]; then
            $GITHUB_WORKSPACE/Patches/Patches.sh
          else
            echo "No patches need to be installed!"
          fi

      - name: Check Caches（检查缓存）
        if: env.WRT_TEST != 'true'
        id: check-cache
        uses: actions/cache@main
        with:
          key: ${{env.WRT_TARGET}}-${{env.WRT_VER}}-${{env.WRT_HASH}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Caches（更新缓存）
        if: env.WRT_TEST != 'true'
        run: |
          if ${{steps.check-cache.outputs.cache-hit == 'true'}}; then
            sed -i 's/ $(tool.*\/stamp-compile)//g' ./wrt/Makefile
            sed -i 's/ $(tool.*\/stamp-install)//g' ./wrt/Makefile

            echo "toolchain skiped done!"
          else
            gh extension install actions/gh-actions-cache

            CACHE_LIST=$(gh actions-cache list --key "$WRT_TARGET-$WRT_VER" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh actions-cache delete $CACHE_KEY --confirm
            done

            echo "caches cleanup done!"
          fi

      - name: Update Feeds（更新订阅源）
        run: |
          cd ./wrt/
          #_______________我添加的___________________________________________________________________________________
          echo >> feeds.conf.default
          #echo "src-git nas https://github.com/linkease/nas-packages.git" >> ./feeds.conf.default
          #echo "src-git nas_luci https://github.com/linkease/nas-packages-luci.git" >> ./feeds.conf.default
          echo "src-git istore https://github.com/linkease/istore" >> ./feeds.conf.default
          #echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
          #echo "src-git kenzok8 https://github.com/kenzok8/small-package.git" >> ./feeds.conf.default
          #echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git" >> ./feeds.conf.default
          #echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall.git" >> ./feeds.conf.default
          
          #./scripts/feeds update nas nas_luci
          ./scripts/feeds update istore
          
          #./scripts/feeds install -a -p nas
          #./scripts/feeds install -a -p nas_luci
          ./scripts/feeds install -d y -p istore luci-app-store
          #______________________________________________________________________________________________________________
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
    
      - name: Custom Packages（自定义软件包）
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings（自定义设置）
        run: |
          cd ./wrt/

          rm -rf ./tmp* ./.config*

          #_______________我添加的_______________________________________________________________________________________________
          echo"CONFIG_PACKAGE_luci-app-store=y"  >> ./.config

          #echo"CONFIG_PACKAGE_luci-app-linkease=y"  >> ./.config
          #echo"CONFIG_PACKAGE_luci-i18n-linkease-zh-cn=y"  >> ./.config
          #echo"CONFIG_PACKAGE_linkease=y"  >> ./.config
          #echo"CONFIG_PACKAGE_ffmpeg-remux=y"  >> ./.config
          #echo"CONFIG_PACKAGE_linkmount=y"  >> ./.config

          echo"CONFIG_PACKAGE_docker=y"  >> ./.config
          echo"CONFIG_PACKAGE_dockerd=y"  >> ./.config
          echo"CONFIG_PACKAGE_dockerman=y"  >> ./.config
          echo"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y"  >> ./.config
          echo"luci-lib-docker=y"  >> ./.config

          echo "CONFIG_PACKAGE_adbyby=y"  >> ./.config
          echo "CONFIG_PACKAGE_cpufreq=y"  >> ./.config
          echo "CONFIG_PACKAGE_cpulimit=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-accesscontrol=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-adbyby-plus=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-cpufreq=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-cpulimit=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-disks-info=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-onliner=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-openvpn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-ramfree=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-timecontrol=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-timewol=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-ttyd=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-v2raya=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-verysync=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-wrtbwmon=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-zerotier=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-passwall=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-passwall-zh-cn=y"  >> ./.config
          echo "CONFIG_ARIA2_BITTORRENT=y"  >> ./.config
          echo "CONFIG_ARIA2_NOXML=y"  >> ./.config
          echo "CONFIG_ARIA2_OPENSSL=y"  >> ./.config
          echo "CONFIG_ARIA2_WEBSOCKET=y"  >> ./.config
          echo "CONFIG_PACKAGE_aria2=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-aria2=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-aria2-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-arpbind=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-arpbind-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-eqos=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-eqos-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-openclash=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-app-poweroff=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-accesscontrol-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-adbyby-plus-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-cpufreq-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-cpulimit-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-disks-info-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-openvpn-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-ramfree-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-timecontrol-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-timewol-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-ttyd-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-v2raya-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-verysync-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-wrtbwmon-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_luci-i18n-zerotier-zh-cn=y"  >> ./.config
          echo "CONFIG_PACKAGE_ttyd=y"  >> ./.config
          echo "CONFIG_PACKAGE_v2raya=y"  >> ./.config
          echo "CONFIG_PACKAGE_verysync=y"  >> ./.config
          echo "CONFIG_PACKAGE_wrtbwmon=y"  >> ./.config
          echo "CONFIG_PACKAGE_zerotier=y"  >> ./.config

#_______________我添加的_______________________________________________________________________________________________
          cat $GITHUB_WORKSPACE/Config/$WRT_TARGET.txt $GITHUB_WORKSPACE/Config/GENERAL.txt >> .config

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig

      - name: Download Packages（下载软件包）
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware（编译固件）
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j1 V=s

      - name: Machine Information（机器信息）
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware（打包固件）
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config_"$WRT_TARGET"_"$WRT_VER"_"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +

            for TYPE in $WRT_TYPE ; do
              for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
                EXT=$(basename $FILE | cut -d '.' -f 2-)
                NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
                NEW_FILE="$WRT_VER"_"$NAME"_"$WRT_DATE"."$EXT"
                mv -f $FILE ./upload/$NEW_FILE
              done
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
          fi

      - name: Release Firmware（发布固件）
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_TARGET}}_${{env.WRT_VER}}_${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！

            MTK和QCA全系带开源硬件加速，别问了！

            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            平台：${{env.WRT_TARGET}}
            设备：${{env.WRT_TYPE}}
            地址：${{env.WRT_IP}}
            密码：${{env.WRT_PW}}
